package com.xworkz.test.add;

import com.xworkz.test.Types.variables.Refrigerator;
import com.xworkz.test.Types.variables.Ring;
import com.xworkz.test.Types.variables.Shoe;
import com.xworkz.test.Types.variables.ToothPaste;
import com.xworkz.test.Types.variables.Brush;
import com.xworkz.test.Types.variables.Clip;
import com.xworkz.test.Types.variables.Clock;
import com.xworkz.test.Types.variables.Dress;
import com.xworkz.test.Types.variables.Knife;
import com.xworkz.test.Types.variables.Paarke;
public class TypesRunner {

	public static void main(String[] args) {
		
		System.out.println("&&&&&&&&&&&&&&Refrigerator&&&&&&&&&&&&&&");
		Refrigerator ref=new Refrigerator();
		ref.brandName="Haier";
		System.out.println(ref.brandName);
		ref.color="Grey";
		System.out.println(ref.color);
		ref.material="Dazzel Steel";
		System.out.println(ref.material);
		ref.capacity=325;
		System.out.println(ref.capacity);
		ref.type="Frost Free Refrigerator";
		System.out.println(ref.type);
		ref.height=164;
		System.out.println(ref.height);
		ref.weight=65;
		System.out.println(ref.weight);
		ref.price=34990;
		System.out.println(ref.price);
		ref.energyEfficiency=3;
		System.out.println(ref.energyEfficiency);
		ref.PowerConsumption=805;
		System.out.println(ref.PowerConsumption);
		ref.tempratureControl=7;
		System.out.println(ref.tempratureControl);
		ref.coolingSystem="Turbo Cooling";
		System.out.println(ref.coolingSystem);
		ref.climateClass=true;
		System.out.println(ref.climateClass);
		ref.noiseLevel="Gurgling Sound";
		System.out.println(ref.noiseLevel);
		ref.doorHinge="Left side";
		System.out.println(ref.doorHinge);
		ref.numberOfDoors=3;
		System.out.println(ref.numberOfDoors);
		ref.doorDesign="Flat";
		System.out.println(ref.doorDesign);
		ref.havingDoorAlaram=false;
		System.out.println(ref.havingDoorAlaram);
		ref.interiorLightingMode="Medium";
		System.out.println(ref.interiorLightingMode);
		ref.numberOfshevles=3;
		System.out.println(ref.numberOfshevles);
		ref.shelfMaterial="Toughened Glass";
		System.out.println(ref.shelfMaterial);
		ref.isItHasACrisperDrawers=true;
		System.out.println(ref.isItHasACrisperDrawers);
		ref.isItHaveATempratureZone=true;
		System.out.println(ref.isItHaveATempratureZone);
		ref.iceMakeres=" Twist Ice Maker";
		System.out.println(ref.iceMakeres);
		ref.freezerShelves=1;
		System.out.println(ref.freezerShelves);
		ref.freezerCapacity=85;
		System.out.println(ref.freezerCapacity);
		ref.freshFoodCapacity=240;
		System.out.println(ref.freshFoodCapacity);
		ref.waterDispenser="Reserving Water inside the Refrigerator";
		System.out.println(ref.waterDispenser);
		ref.isItHaveChildLock=true;
		System.out.println(ref.isItHaveChildLock);
		ref.filtrationSystem="Automatic";
		System.out.println(ref.filtrationSystem);
		ref.smartConnectivity="Wifi or Bluetooth";
		System.out.println(ref.smartConnectivity);
		ref.isItTouchControl=false;
		System.out.println(ref.isItTouchControl);
		ref.isItHasAdjusetableFeet=true;
		System.out.println(ref.isItHasAdjusetableFeet);
		ref.isItAFastFreez=true;
		System.out.println(ref.isItAFastFreez);
		ref.shelfType="Fiber";
		System.out.println(ref.shelfType);
		ref.freezerDrawer=1;
		System.out.println(ref.freezerDrawer);
		ref.isItHasAAirPurification=true;
		System.out.println(ref.isItHasAAirPurification);
		ref.isItAMultiAirFlowSystem=false;
		System.out.println(ref.isItAMultiAirFlowSystem);
		ref.isItHasAQuickCool=true;
		System.out.println(ref.isItHasAQuickCool);
		ref.willIteAlertAPowerFailur=true;
		System.out.println(ref.willIteAlertAPowerFailur);
		ref.isItStabilizerFree=false;
		System.out.println(ref.isItStabilizerFree);
		ref.riversibleDoor="Right side";
		System.out.println(ref.riversibleDoor);
		ref.vacationMode="Vacation mood is On when we On";
		System.out.println(ref.vacationMode);
		ref.isItHasOpenDoorAlaram=false;
		System.out.println(ref.isItHasOpenDoorAlaram);
		ref.configuration="Full Sized Freezer-on-Bottom";
		System.out.println(ref.configuration);
		ref.isItHasShelfclose=false;
		System.out.println(ref.isItHasShelfclose);
		ref.isItHaveAGlassDoor=false;
		System.out.println(ref.isItHaveAGlassDoor);
		ref.isItconvertableFromFreezerToRefrigerator=true;
		System.out.println(ref.isItconvertableFromFreezerToRefrigerator);
		ref.isItAdjustableDoorBins=true;
		System.out.println(ref.isItAdjustableDoorBins);
		ref.dairyCompartment=1;
		System.out.println(ref.dairyCompartment);
		ref.eggTray=1;
		System.out.println(ref.eggTray);
		ref.wineRack=2;
		System.out.println(ref.wineRack);
		ref.isItTouchScreendisplay=false;
		System.out.println(ref.isItTouchScreendisplay);
		ref.doorStorage=1;
		System.out.println(ref.doorStorage);
		ref.isItTopFrezer=true;
		System.out.println(ref.isItTopFrezer);
		ref.isItBotomFrezer=false;
		System.out.println(ref.isItBotomFrezer);
		ref.doorFinish="Steel";
		System.out.println(ref.doorFinish);
		ref.doorSwingSide="Right to Left";
		System.out.println(ref.doorSwingSide);
		ref.selfClosingDoors=" Self closing doors Present";
		System.out.println(ref.selfClosingDoors);
		ref.haveATemperatureMemory=false;
		System.out.println(ref.haveATemperatureMemory);
		ref.adjustableCrisperHumidity="Control over humidity in crisper drawers";
		System.out.println(ref.adjustableCrisperHumidity);
		ref.isItHaveAFreezerTemperatureIndicator=true;
		System.out.println(ref.isItHaveAFreezerTemperatureIndicator);
		ref.isIthaveARefrigeratorTemperatureIndicator=true;
		System.out.println(ref.isIthaveARefrigeratorTemperatureIndicator);
		ref.beverageChillerCompartment=1;
		System.out.println(ref.beverageChillerCompartment);
		ref.autoDefrostFreezer=false;
		System.out.println(ref.autoDefrostFreezer);
		ref.doorRackGallonStorage=1;
		System.out.println(ref.doorRackGallonStorage);
		ref.isItHavingAfingerprintResistance=false;
		System.out.println(ref.isItHavingAfingerprintResistance);
		ref.openDrawerAlert="On";
		System.out.println(ref.openDrawerAlert);
		ref.airTightCrisper="present";
		System.out.println(ref.airTightCrisper);
		ref.isItAVisibleHiddenHinges=true;
		System.out.println(ref.isItAVisibleHiddenHinges);
		ref.isItAAdjustableSplitShelves=true;
		System.out.println(ref.isItAAdjustableSplitShelves);
		ref.itItAdjustableFreezerBins=true;
		System.out.println(ref.itItAdjustableFreezerBins);
		ref.freezerLight="Medium";
		System.out.println(ref.freezerLight);
		ref.refrigeratorLight="High";
		System.out.println(ref.refrigeratorLight);
		ref.isItHavingDoorBaskets=true;
		System.out.println(ref.isItHavingDoorBaskets);
		ref.liftUpShelf=0;
		System.out.println(ref.liftUpShelf);
		ref.warranty=1;
		System.out.println(ref.warranty);
		ref.dimensions=66.3f;
		System.out.println(ref.dimensions);
		ref.paymentType="Credit card";
		System.out.println(ref.paymentType);
		ref.numberOfClosedRacks=2;
		System.out.println(ref.numberOfClosedRacks);
		
		
				System.out.println("&&&&&&&&&&&&&&Clock&&&&&&&&&&&&&&");
				Clock clock=new Clock();
				clock.brandName="Titan";
				System.out.println(clock.brandName);
				clock.color="Silver";
				System.out.println(clock.color);
				clock.material="Plastic";
				System.out.println(clock.material);
				clock.shape="Round";
				System.out.println(clock.shape);
				clock.type="Analog";
				System.out.println(clock.type);
				clock.frameMaterial="Plastic";
				System.out.println(clock.frameMaterial);
				clock.style="Contemporary";
				System.out.println(clock.style);
				clock.isItAGoodBrand=true;
				System.out.println(clock.isItAGoodBrand);
				clock.weight=30;
				System.out.println(clock.weight);
				clock.height=30;
				System.out.println(clock.height);
				clock.numberColor="Black";
				System.out.println(clock.numberColor);
				clock.hasManufacturedDate=true;
				System.out.println(clock.hasManufacturedDate);
				clock.roomType="Living Room";
				System.out.println(clock.roomType);
				clock.warranty=1;
				System.out.println(clock.warranty);
				clock.numberOfHands=3;
				System.out.println(clock.numberOfHands);
				clock.handsColor="Black";
				System.out.println(clock.handsColor);
				clock.isItAPopularBrand=true;
				System.out.println(clock.isItAPopularBrand);
				clock.price=1076;
				System.out.println(clock.price);
				clock.isNumberAreInteger=true;
				System.out.println(clock.isNumberAreInteger);
				clock.displayType="Analog";
				System.out.println(clock.displayType);
				clock.isItInNumberFormat=true;
				System.out.println(clock.isItInNumberFormat);
				clock.technology="Silent Sweep";
				System.out.println("clock.technology");
				clock.ageRange="Adult";
				System.out.println(clock.ageRange);
				clock.isDigital=false;
				System.out.println(clock.isDigital);
				clock.hasAlarm=false;
				System.out.println(clock.hasAlarm);
				clock.hours=12;
				System.out.println(clock.hours);
				clock.minutes=60;
				System.out.println(clock.minutes);
				clock.seconds=60;
				System.out.println(clock.seconds);
				clock.is24HourFormat=false;
				System.out.println(clock.is24HourFormat);
				clock.hasBattery=true;
				System.out.println(clock.hasBattery);
				clock.poweredSource="Battery saved";
				System.out.println(clock.poweredSource);
				clock.hasSnoozeButton=false;
				System.out.println(clock.hasSnoozeButton);
				clock.specialFeature="Silent Clock";
				System.out.println(clock.specialFeature);
				clock.isAAtomicClock=false;
				System.out.println(clock.isAAtomicClock);
				clock.isItATemperatureDisplay=false;
				System.out.println(clock.isItATemperatureDisplay);
				clock.hasANightLight=false;
				System.out.println(clock.hasANightLight);
				clock.isItASmartClock=false;
				System.out.println(clock.isItASmartClock);
				clock.isElectricPowered=false;
				System.out.println(clock.isElectricPowered);
				clock.hasDateDisplay=false;
				System.out.println(clock.hasDateDisplay);
				clock.isBluetoothEnabled=false;
				System.out.println(clock.isBluetoothEnabled);
				clock.isItAntique=true;
				System.out.println(clock.isItAntique);
				clock.hasDaylightSavingTime=false;
				System.out.println(clock.hasDaylightSavingTime);
				clock.isSolarPowered=false;
				System.out.println(clock.isSolarPowered);
				clock.isItAMultipleTimezones=false;
				System.out.println(clock.isItAMultipleTimezones);
				clock.isPendulumClock=false;
				System.out.println(clock.isPendulumClock);
				clock.isItWaterproof=false;
				System.out.println(clock.isItWaterproof);
				clock.size="Medium";
				System.out.println(clock.size);
				clock.isItModern=false;
				System.out.println(clock.isItModern);
				clock.isAnalog=true;
				System.out.println(clock.isAnalog);
				clock.customerRatingByFeatures=3.36f;
				System.out.println("clock.customerRating");
				clock.accuracy=4.3f;
				System.out.println(clock.accuracy);
				clock.easyToRead=4.4f;
				System.out.println(clock.easyToRead);
				clock.valueForMoney=4.1f;
				System.out.println(clock.valueForMoney);
				clock.sheernes=4.0f;
				System.out.println(clock.sheernes);
				clock.hasCountdownTimer=false;
				System.out.println(clock.hasCountdownTimer);
				clock.paymentType="Cash";
				System.out.println(clock.paymentType);
				clock.hasStopwatch=false;
				System.out.println(clock.hasStopwatch);
				clock.hasACalendar=false;
				System.out.println(clock.hasACalendar);
				clock.isItARemoteControlClock=false;
				System.out.println(clock.isItARemoteControlClock);
				clock.hasVoiceControl=false;
				System.out.println(clock.hasVoiceControl);
				clock.hasBluetoothSpeaker=false;
				System.out.println(clock.hasBluetoothSpeaker);
				clock.areBatteriesIncluded=true;
				System.out.println(clock.areBatteriesIncluded);
				clock.customerRatings=4.5f;
				System.out.println(clock.customerRatings);
				clock.hasSleepTimer=false;
				System.out.println(clock.hasSleepTimer);
				clock.hasMetallicFinish=false;
				System.out.println(clock.hasMetallicFinish);
				clock.hasAutoTimeSync=false;
				System.out.println(clock.hasAutoTimeSync);
				clock.hasBarometer=false;
				System.out.println(clock.hasBarometer);
				clock.hasLoudAlarm=true;
				System.out.println(clock.hasLoudAlarm);
				clock.isItTopBrand=true;
				System.out.println(clock.isItTopBrand);
				clock.theme="plane";
				System.out.println(clock.theme);
				clock.mountingType="Wall Mount";
				System.out.println(clock.mountingType);
				clock.indoorOrOutdoorUsage="Indoor";
				System.out.println(clock.indoorOrOutdoorUsage);
				clock.hasModernDesign=true;
				System.out.println(clock.hasModernDesign);
				clock.watchMovement="Mechanical";
				System.out.println(clock.watchMovement);
				clock.capacity=30;
				System.out.println(clock.capacity);
				clock.isWallClock=true;
				System.out.println(clock.isWallClock);
				clock.manufacturer="‎Import By Titan Company Limited";
				System.out.println(clock.manufacturer);
				clock.modelNumber="‎NBW0001PA01A";
				System.out.println(clock.modelNumber);
				clock.shippingWeight=0.93f;
				System.out.println(clock.shippingWeight);
				clock.genericName="Wall Clock";
				System.out.println(clock.genericName);
				clock.packer="Titan Company Limited";
				System.out.println(clock.packer);
				clock.countryOrigin="China";
				System.out.println(clock.countryOrigin);
		

			
				System.out.println("&&&&&&&&&&&&&Dress&&&&&&&&&&&&&&");
				Dress dress = new Dress();
				dress.material="Silk";
				System.out.println(dress.material);
				dress.isItBreathability = true;
				System.out.println(dress.isItBreathability);
				dress.fabricType = "Leno weave fabric";
				System.out.println(dress.fabricType);
				dress.texture = "dark Crepe";
				System.out.println(dress.texture);
				dress.sleeveLength = 0;
				System.out.println(dress.sleeveLength);
				dress.sleeveStyle = "Sleeveless";
				System.out.println(dress.sleeveStyle);
				dress.pattern = "Lotus";
				System.out.println(dress.pattern);
				dress.color = "Maroon";
				System.out.println(dress.color);
				dress.dressDesign = "Floral";
				System.out.println(dress.dressDesign);
				dress.length = "Maxi Length";
				System.out.println(dress.length);
				dress.strapStyle = "trendy strap";
				System.out.println(dress.strapStyle);
				dress.style = "Trendy";
				System.out.println(dress.style);
				dress.price = 1798;
				System.out.println(dress.price);
				dress.hasCollar = false;
				System.out.println(dress.material);
				dress.hasCuff =true ;
				System.out.println(dress.hasCuff);
				dress.cuffDetails = " French Cuff";
				System.out.println(dress.cuffDetails);
				dress.fastening = "Zipper";
				System.out.println(dress.fastening);
				dress.brand = "Indya";
				System.out.println(dress.brand);
				dress.dressMadeIn = "India";
				System.out.println(dress.dressMadeIn);
				dress.size = 'M';
				System.out.println(dress.size);
				dress.shape = "Full Length";
				System.out.println(dress.shape);
				dress.silhouette = "Wraped dress";
				System.out.println(dress.silhouette);
				dress.transparency = "Normal";
				System.out.println(dress.transparency);
				dress.shoppingType = "Online";
				System.out.println(dress.shoppingType);
				dress.opacity = true; 
				System.out.println(dress.opacity);
				dress.weight = 600;
				System.out.println(dress.weight);
				dress.isWrinkleResistance =true;
				System.out.println(dress.isWrinkleResistance);
				dress.isItStiff = false; 
				System.out.println(dress.isItStiff);
				dress.hasElasticity = false; 
				System.out.println(dress.hasElasticity);
				dress.drapability = "Easy";
				System.out.println(dress.drapability);
				dress.waterResistance = true;
				System.out.println(dress.waterResistance);
				dress.isWindResistance = false;
				System.out.println(dress.isWindResistance);
				dress.isItTraditionalWear = true;
				System.out.println(dress.isItTraditionalWear);
				dress.isItOccasinalSutability =true;
				System.out.println(dress.isItOccasinalSutability);
				dress.isItModesty = true;
				System.out.println(dress.isItModesty);
				dress.kimonoSleeves = false;
				System.out.println(dress.kimonoSleeves);
				dress.isItComfort = true;
				System.out.println(dress.isItComfort);
				dress.isItHandMade = false;
				System.out.println(dress.isItHandMade);
				dress.neckline ="NormalNeck";
				System.out.println(dress.neckline);
				dress.PrintType = "Lavished with Lotus motif foil print";
				System.out.println(dress.PrintType);
				dress.fit = "Loose Fit";
				System.out.println(dress.fit);
				dress.occasion = "Festive Occasion";
				System.out.println(dress.occasion);
				dress.closureType = "button closure";
				System.out.println(dress.closureType);
				dress. waistline = "Kurti";
				System.out.println(dress. waistline);
				dress.beltPattren = "Belt with pearls and gold zari tassels";
				System.out.println(dress.beltPattren);
				dress.backDesign = "Printed Floral Design";
				System.out.println(dress.backDesign);
				dress.collarType = false;
				System.out.println(dress.collarType);
				dress.shoulderStyle = "Normal";
				System.out.println(dress.shoulderStyle);
				dress.embellishment = "Embroidery";
				System.out.println(dress.embellishment);
				dress.embellishmentColor = "Gold";
				System.out.println(dress.embellishmentColor);
				dress.trainLength = 2;
				System.out.println(dress.trainLength);
				dress.dupattaType = "Attached";
				System.out.println(dress.dupattaType);
				dress.hasTie  = false;
				System.out.println(dress.hasTie);
				dress.pockets = 1;
				System.out.println(dress.pockets);
				dress.hasBelt = true;
				System.out.println(dress.hasBelt);
				dress.printColor = "Maroon";
				System.out.println(dress.printColor);
				dress.slitDetails = "flared";
				System.out.println(dress.slitDetails);
				dress.hasLining = true;
				System.out.println(dress.hasLining);
				dress.backClosureStyle = "Zip";
				System.out.println(dress.backClosureStyle);
				dress.waistDetails = "PinWheel";
				System.out.println(dress.waistDetails);
				dress.hasPrint = true;
				System.out.println(dress.hasPrint);
				dress.printPlacement = "Circle";
				System.out.println(dress.printPlacement);
				dress.drapeStyle = "Normal";
				System.out.println(dress.drapeStyle);
				dress.backVentDetails = "needlework";
				System.out.println(dress.backVentDetails);
				dress.sleeveCutoutDetails = "Mesh";
				System.out.println(dress.sleeveCutoutDetails);
				dress.cutoutDetails = "Maroon Cut";
				System.out.println(dress.cutoutDetails);
				dress.pocketStyle = "Side Pocket";
				System.out.println(dress.pocketStyle);
				dress.textureContrast = "ploy haven";
				System.out.println(dress.textureContrast);
				dress.hasPleatDetail = true;
				System.out.println(dress.hasPleatDetail);
				dress.decorativeButtons = "Gold plastic";
				System.out.println(dress.decorativeButtons);
				dress.hasRibbon = false;
				System.out.println(dress.hasRibbon);
				dress.hasKnot = false;
				System.out.println(dress.hasKnot);
				dress.slitPlacement = "sequin";
				System.out.println(dress.slitPlacement);
				dress.hasPatchwork = false;
				System.out.println(dress.hasPatchwork);
				dress.quiltingDetails = "Silk Linen";
				System.out.println(dress.quiltingDetails);
				dress.contrastPiping = "Gold";
				System.out.println(dress.contrastPiping);
				dress.puffSleeves = false;
				System.out.println(dress.puffSleeves);
				dress.cargoPockets = false;
				System.out.println(dress.cargoPockets);
				dress.drapedNeckline = false;
				System.out.println(dress.drapedNeckline);
				dress.hasBow = false;
				System.out.println(dress.hasBow);
				dress.hasTie = false;
				System.out.println(dress.hasTie);

				
				
				System.out.println("&&&&&&&&&&&&&&Brush&&&&&&&&&&&&&&");
				
				Brush brush=new Brush();
				brush.brand = "Beco";
				System.out.println(brush.brand);
				brush. color = "Brown";
				System.out.println(brush.color);
				brush. hasOpacity = false;
				System.out.println(brush. hasOpacity);
				brush. brushType = "Wood";
				System.out.println(brush. brushType);
				brush. hasHardness =false;
				System.out.println(brush. hasHardness);
				brush. brushStickShape = "Straight";
				System.out.println(brush. brushStickShape);
				brush. pattern = "Oval";
				System.out.println(brush. pattern);
				brush. smoothing = true;
				System.out.println(brush. smoothing);
				brush. hasSize = true;
				System.out.println(brush. hasSize);
				brush. pressureSensitivity = true;
				System.out.println(brush. pressureSensitivity);
				brush. specialFeature = "Compostable, Biodegradable, Ultra-Soft Bristles, Eco-Friendly, Charcoal";
				System.out.println(brush. specialFeature);
				brush. dualBrush = false;
				System.out.println(brush. dualBrush);
				brush. powerSource = "Manual";
				System.out.println(brush. powerSource);
				brush. ageRange = "All Age group";
				System.out.println(brush. ageRange);
				brush. itemFirmness = "Ultra soft";
				System.out.println(brush. itemFirmness);
				brush. tiltSensitivity = false;
				System.out.println(brush. tiltSensitivity);
				brush. material = "Compostable";
				System.out.println(brush. material);
				brush. numberOfItems = 3;
				System.out.println(brush. numberOfItems);
				brush. toothBrushHeadShape="Oval";
				System.out.println(brush. toothBrushHeadShape);
				brush. wetEdges = true;
				System.out.println(brush. wetEdges);
				brush.blendMode =false;
				System.out.println(brush.blendMode);
				brush. netQuantity = 3;
				System.out.println(brush. netQuantity);
				brush. design = "Plane";
				System.out.println(brush. design);
				brush. ingredients = " Bamboo Toothbrush,Charcoal";
				System.out.println(brush. ingredients);
				brush. manufacturer = "‎Kwick Living";
				System.out.println(brush. manufacturer);
				brush. madeIn = "India";
				System.out.println(brush. madeIn);
				brush. dynamicBrush = false;
				System.out.println(brush. dynamicBrush);
				brush.brushColor = "Black";
				System.out.println(brush.brushColor);
				brush. model = "Bamboo";
				System.out.println(brush. model);
				brush. dimensions = 6;
				System.out.println(brush. dimensions);
				brush. weight = 400;
				System.out.println(brush. weight);
				brush. ownerName = "Dhanushree";
				System.out.println(brush. ownerName);
				brush. highlighting = true;
				System.out.println(brush. highlighting);
				brush. shadowing = false;
				System.out.println(brush. shadowing);
				brush. glowEffect = false;
				System.out.println(brush. glowEffect);
				brush. genericName = "Charcoal Infused Wooden Bamboo ToothBrush";
				System.out.println(brush. genericName);
				brush. customBrushes = false;
				System.out.println(brush. customBrushes);
				brush. animatedBrushes = false;
				System.out.println(brush. animatedBrushes);
				brush. hasModelNumber = true;
				System.out.println(brush. hasModelNumber);
				brush. packer = "Kwick Living";
				System.out.println(brush. packer);
				brush. dynamicColorBlending = false;
				System.out.println(brush. dynamicColorBlending);
				brush. layeredBrushes =true;
				System.out.println(brush. layeredBrushes);
				brush. dynamicLighting = false;
				System.out.println(brush. dynamicLighting);
				brush. brushRotationWithDirection = "Right to Left";
				System.out.println(brush. brushRotationWithDirection);
				brush. dynamicGradients = false;
				System.out.println(brush. dynamicGradients);
				brush. hasModelName = true;
				System.out.println(brush. hasModelName);
				brush. watercolorSimulation = true;
				System.out.println(brush. watercolorSimulation);
				brush. magneticBrush = false;
				System.out.println(brush. magneticBrush);
				brush. dynamicColorMixing = false;
				System.out.println(brush. dynamicColorMixing);
				brush. patternSmoothing = true;
				System.out.println(brush. patternSmoothing);
				brush. directionalBrush = false;
				System.out.println(brush. directionalBrush);
				brush. preserveTransparency = false;
				System.out.println(brush. preserveTransparency);
				brush. isItOdourFree = true;
				System.out.println(brush. isItOdourFree);
				brush. stitchingBrushes = true;
				System.out.println(brush. stitchingBrushes);
				brush.autoStraightening = false;
				System.out.println(brush.autoStraightening);
				brush. patternOverlay = false;
				System.out.println(brush. patternOverlay);
				brush. isItSafeToUse = true;
				System.out.println(brush. isItSafeToUse);
				brush. brushShapeDistortion = false;
				System.out.println(brush. brushShapeDistortion);
				brush. hasPcker = true;
				System.out.println(brush. hasPcker);
				brush. isItGoodToUse = true;
				System.out.println(brush. isItGoodToUse);
				brush. Usability = "Infused with the goodness of Charchol";
				System.out.println(brush. Usability);
				brush. hasImporter = true;
				System.out.println(brush. hasImporter);
				brush. dynamicPerspective = false;
				System.out.println(brush. dynamicPerspective);
				brush. automaticSmoothing = false;
				System.out.println(brush. automaticSmoothing);
				brush. damagesTheGums = false;
				System.out.println(brush. damagesTheGums);
				brush. patternDirectionControl = false;
				System.out.println(brush. patternDirectionControl);
				brush.willItBreaksDown = true;
				System.out.println(brush.willItBreaksDown);
				brush. noise = false;
				System.out.println(brush. noise);
				brush. reusability = true;
				System.out.println(brush. reusability);
				brush. interactiveBrushPalette = false;
				System.out.println(brush. interactiveBrushPalette);
				brush. dynamicEdgeDetection = true;
				System.out.println(brush. dynamicEdgeDetection);
				brush. isItSmartBrush = true;
				System.out.println(brush. isItSmartBrush);
				brush. dynamicZooming = false;
				System.out.println(brush. dynamicZooming);
				brush. isItMadeInIndia = true;
				System.out.println(brush. isItMadeInIndia);
				brush. hasIngrediants = true;
				System.out.println(brush. hasIngrediants);
				brush. price = 30;
				System.out.println(brush. price);
				brush. hasDimensions = true;
				System.out.println(brush. hasDimensions);
				brush. multiBrushBlending = true;
				System.out.println(brush. multiBrushBlending);
				brush. isItPlasticBrush = false;
				System.out.println(brush. isItPlasticBrush);
				brush. isItWoodenBrush = true;
				System.out.println(brush. isItWoodenBrush);
				
				
				
				System.out.println("&&&&&&&&&&&&&ToothPaste&&&&&&&&&&&&&&");

				
				ToothPaste paste=new ToothPaste();
				System.out.println(paste.flavor);
				System.out.println(paste.ageRange);
				System.out.println(paste.itemForm);
				System.out.println(paste.materialFeature);
				System.out.println(paste.itemWeight);
				System.out.println(paste.productBenefits);
				System.out.println(paste.itemPackageQuantity);
				System.out.println(paste.targetAudience);
				System.out.println(paste.length);
				System.out.println(paste.height);
				System.out.println(paste.width);
				System.out.println(paste.willItProtectCavity);
				System.out.println(paste.willItReliveFromDentalPain);
				System.out.println(paste.mainComponent);
				System.out.println(paste.noAddedSets);
				System.out.println(paste.pasteColor);
				System.out.println(paste.experience);
				System.out.println(paste.ingredients);
				System.out.println(paste.isItVegitarian);
				System.out.println(paste.willItGivesStrongTeeth);
				System.out.println(paste.willItGivehealthyTeeth);
				System.out.println(paste.isItPainReliving);
				System.out.println(paste.countryOrigin);
				System.out.println(paste.netQuantity);
				System.out.println(paste.itemModelNumber);
				System.out.println(paste.genericName);
				System.out.println(paste.paymentType);
				System.out.println(paste.ShoppingType);
				System.out.println(paste.ProductType);
				System.out.println(paste.brandName);
				System.out.println(paste.price);
				System.out.println(paste.startedIn);
				System.out.println(paste.startedBy);
				System.out.println(paste.boxshape);
				System.out.println(paste.companyLocatedIn);
				System.out.println(paste.hasDescription);
				System.out.println(paste.pH);
				System.out.println(paste.isWhitenTheTooth);
				System.out.println(paste.isUsedForJewelleryCleaning);
				System.out.println(paste.isUsedForSilverChainCleaning);
				System.out.println(paste.medicineType);
				System.out.println(paste.CEOOfDaburCompnay);
				System.out.println(paste.companyName);
				System.out.println(paste.isUsedByChildren);
				System.out.println(paste.whatIsTheSymbolOfDabur);
				System.out.println(paste.banyanTreeBroadTrunkRepresents);
				System.out.println(paste.banyanTreeMultipleBranchesRepresents);
				System.out.println(paste.madeIn);
				System.out.println(paste.founder);
				System.out.println(paste.ManufacturedBy);
				System.out.println(paste.experiyDate);
				System.out.println(paste.hasALogo);
				System.out.println(paste.website);
				System.out.println(paste.properties);
				System.out.println(paste.isGovernmentCompany);
				System.out.println(paste.boxColour);
				System.out.println(paste.capColour);
				System.out.println(paste.capShape);
				System.out.println(paste.capDesign);
				System.out.println(paste.itContainSalt);
				System.out.println(paste.manufacturer);
				System.out.println(paste.isSensitiveRelief);
				System.out.println(paste.isUsedByAdults);
				System.out.println(paste.packingType);
				System.out.println(paste.hasHerbalExtracts);
				System.out.println(paste.toothpasteCapOpenType);
				System.out.println(paste.hasDiffirentsize);
				System.out.println(paste.hasDiffirentprice);
				System.out.println(paste.daburIsOwnedByUS);
				System.out.println(paste.hasDifferentInIngrediants);
				System.out.println(paste.hasDiffirentcolor);
				System.out.println(paste.isDifferentInTaste);
				System.out.println(paste.hasDifferentInBoxColor);
				System.out.println(paste.ratings);
				System.out.println(paste.hasEmployees);
				System.out.println(paste.isEffectiveOralCare);
				System.out.println(paste.incomePerMonth);
				System.out.println(paste.isAvailableInOnline);
				System.out.println(paste.isOnlinePaymentAvailable);
				System.out.println(paste.isGoodForTeeth);
				
				
				System.out.println("&&&&&&&&&&&&&&&&Clip&&&&&&&&&&&&&&&&&&&");
				
				  Clip clip = new Clip();
			      System.out.println(clip.brand);
			      System.out.println(clip.size);
			      System.out.println(clip.type);
			      System.out.println(clip.clipOccasion);
			      System.out.println(clip.pattern);
			      System.out.println(clip.embellishmentFeature);
			      System.out.println(clip.numberOfStones);
			      System.out.println(clip.stoneType);
			      System.out.println(clip.stoneShape);
			      System.out.println(clip.isItHairClip);
			      System.out.println(clip.clipMaterial);
			      System.out.println(clip.numberOfPieces);
			      System.out.println(clip.hairType);
			      System.out.println(clip.noOfTeeth);
			      System.out.println(clip.willItBurn);
			      System.out.println(clip.isItNewArrival);
			      System.out.println(clip.occasion);
			      System.out.println(clip. clipMetal);
			      System.out.println(clip.style);
			      System.out.println(clip.isItFiber);
			      System.out.println(clip.netQuantity);
			      System.out.println(clip.isItspringCover);
			      System.out.println(clip.numberOfItems);
			      System.out.println(clip.isItMetal);
			      System.out.println(clip.itemWeight);
			      System.out.println(clip.isItGlassy);
			      System.out.println(clip.regionOfOrigin);
			      System.out.println(clip.manufacturedBy);
			      System.out.println(clip.isItSuitableForLongHair);
			      System.out.println(clip.isItEasyToUse);
			      System.out.println(clip.genericName);
			      System.out.println(clip.isItGripControl);
			      System.out.println(clip.packedBy);
			      System.out.println(clip.isItWaterproof);
			      System.out.println(clip.packageContent);
			      System.out.println(clip.isItPlane);
			      System.out.println(clip.modelName);
			      System.out.println(clip.finish);
			      System.out.println(clip.isItFoldable);
			      System.out.println(clip.modelNo);
			      System.out.println(clip. stylingVersatility);
			      System.out.println(clip.clipWeight);
			      System.out.println(clip.cliplength);
			      System.out.println(clip. manufacturer);
			      System.out.println(clip.department);
			      System.out.println(clip.isItGoodQuality);
			      System.out.println(clip. usage);
			      System.out.println(clip.adjustability);
			      System.out.println(clip.isItSafeToUse);
			      System.out.println(clip.willItBreak);
			      System.out.println(clip. isWaterResistant);
			      System.out.println(clip.functionality);
			      System.out.println(clip.isUsedByChildren);
			      System.out.println(clip.isAntiSlip);
			      System.out.println(clip.itIsAvailableOnline);
			      System.out.println(clip.isItMetalClip);
			      System.out.println(clip.isConvertable);
			      System.out.println(clip.isItWearByMen);
			      System.out.println(clip.isItJewellery);
			      System.out.println(clip.smoothEdges);
			      System.out.println(clip.isItHavingBun);
			      System.out.println(clip.texture);
			      System.out.println(clip.ecoFriendly);
			      System.out.println(clip.isItAffordalePrice);
			      System.out.println(clip.isItwaterResistant);
			      System.out.println(clip.inventedby);
			      System.out.println(clip.hasJawClucthes);
			      System.out.println(clip.isItPlastic);
			      System.out.println(clip.hasManufacturer);
			      System.out.println(clip.noOfSpringsInClip);
			      System.out.println(clip.offlineAvailability);
			      System.out.println(clip.isItHoldingHair);
			      System.out.println(clip.affordability);
			      System.out.println(clip.isItTrendy);
			      System.out.println(clip.price);
			      System.out.println(clip.color);
			      System.out.println(clip.shape);
			      System.out.println(clip.theme);
			      System.out.println(clip. isItRecyclable);
			      System.out.println(clip. isMultiColorAvailable);
			      
			      System.out.println("&&&&&&&&&&&&&&Ring&&&&&&&&&&&&");
			      
			      	Ring ring=new Ring();
			      	System.out.println(ring.shopName);
					System.out.println(ring.shopLocation);
					System.out.println(ring.typeOfRing);
					System.out.println(ring.metalType);
					System.out.println(ring.cost);
					System.out.println(ring.shopOwnerName);
					System.out.println(ring.ringSize);
					System.out.println(ring.shape);
					System.out.println(ring.materialType);
					System.out.println(ring.metalWeight);
					System.out.println(ring.daimondWeight);
					System.out.println(ring.PaymentType);
					System.out.println(ring.billingType);
					System.out.println(ring.isEMIPaymentAvailable);
					System.out.println(ring.canWeGift);
					System.out.println(ring.occasionForGifting);
					System.out.println(ring.isItPrecious);
					System.out.println(ring.Height);
					System.out.println(ring.Weight);
					System.out.println(ring.pearlType);
					System.out.println(ring.stoneShape);
					System.out.println(ring.hasStone);
					System.out.println(ring.surfaceBlemishes);
					System.out.println(ring.hasWarranty);
					System.out.println(ring.stoneType);
					System.out.println(ring.stoneSizeInmm);
					System.out.println(ring.hasProng);
					System.out.println(ring.hasShoulder);
					System.out.println(ring.hasCenterHead);
					System.out.println(ring.hasShank);
					System.out.println(ring.hasPattern);
					System.out.println(ring.patternType);
					System.out.println(ring.qualityRating);
					System.out.println(ring.itemWeight);
					System.out.println(ring.manufacturedCountry);
					System.out.println(ring.netQuantity);
					System.out.println(ring.isItAntique);
					System.out.println(ring.isItModern);
					System.out.println(ring.genericName);
					System.out.println(ring.isQualityGood);
					System.out.println(ring.itCanBeShipped);
					System.out.println(ring.deliveryMethod);
					System.out.println(ring.Diameter);
					System.out.println(ring.hasHallMark);
					System.out.println(ring.typesOfRing);
					System.out.println(ring.canBeStolen);
					System.out.println(ring.isDiscontinuedByManufacturer);
					System.out.println(ring.length);
					System.out.println(ring.isReSizable);
					System.out.println(ring.width);
					System.out.println(ring.hasWeight);
					System.out.println(ring.haspurity);
					System.out.println(ring.modelNumber);
					System.out.println(ring.certification);
					System.out.println(ring.hasSize);
					System.out.println(ring.goldOrigin);
					System.out.println(ring.diameter);
					System.out.println(ring.hasQuality);
					System.out.println(ring.isPolished);
					System.out.println(ring.ringWearerName);
					System.out.println(ring.isFamilyRing);
					System.out.println(ring.ringWearingOccasion);
					System.out.println(ring.canBeCleaned);
					System.out.println(ring.isStored);
					System.out.println(ring.isSpecialGift);
					System.out.println(ring.canBeWearedByMen);
					System.out.println(ring.manufacturer);
					System.out.println(ring.isEngagementRing);
					System.out.println(ring.isWeddingRing);
					System.out.println(ring.isDamaged);
					System.out.println(ring.whoWoreTheFirstString);
					System.out.println(ring.isScratched);
					System.out.println(ring.ringStyle);
					System.out.println(ring.willStoneBeMissed);
					System.out.println(ring.ringInventedBy);
					System.out.println(ring.ringCreater);
					System.out.println(ring.canWByFree);
					System.out.println(ring.ringsColor);
					System.out.println(ring.canWeByOnline);
					System.out.println(ring.typeOfJewellery);
					System.out.println(ring.hasSideStone);
					
					System.out.println("&&&&&&&&&&&&&Knife&&&&&&&&&&&");
				
					Knife knife=new Knife();
					knife.name="pigeon";
				    knife.bladeMaterial="Stainless Steel";
				    knife.handleMaterial="Stainless";
				    knife.type="Kitchen Knife";
				    knife.bladeEdge="Hollow";
				    knife.constructionType="‎Stamped";
				    knife.bladeColor="Multicolor";
				    knife.isDishwasherSafe="yes";
				    knife.countryOrigin="India";
				    knife.length=18;
				    knife.width=390;  
				    knife.height=147;
				    knife.weight="230 grams";
				    knife.netQuantity=3;
				    knife.spineThickness="Thick";
				    knife.genericName="Knives";
				    knife.lockingMechanism="Liner";
				    knife.pocketClip="Recersible";
				    knife.bladeLength="20 centimeter";
				    knife.retentionSystem="snap";
				    knife.openingMethod="Thumb";
				    knife.bladeCoating="DLC";
				    knife.rustResistance="coated";
				    knife.corrosionResistance="Rust";
				    knife.handleColor="Black";
				    knife.lanyardHole=true;
				    knife.scales="Textured";
				    knife.jimping="Thumb";
				    knife.bladeShape="SharpTriangle";
				    knife.bladeThickness="thick";
				    knife.spineDesign="swedg";
				    knife.bladeSteelHardness=58;
				    knife.ambidextrousFeatures="studs";
				    knife.fingerGrooves=false;
				    knife.handleLength="Short";
				    knife.bladeFinish="stonewash";
				    knife.grindType="Sharp";
				    knife.bladeSerrationType="partial";
				    knife.tacticalFeatures="seatbelt";
				    knife.rearLocking="back";
				    knife.isItHoldable=true;
				    knife.fullersGrooves=false;
				    knife.fingerGuard="finger";
				    knife.bladeProfile="spear";
				    knife.bladeWidth="wide";
				    knife.handleErgonomics="comfort";
				    knife.fullersGrooves=true;
				    knife.bladeGeometry="flat";
				    knife.razorSharpness="razor";
					knife.rustproofingTreatment="Teflon";
					knife.bladeBelly="Custom";
					knife.bladeAngle=154;
				    knife.customizationOptions="HRC";
					knife.bladeSteelComposition=3;
					knife.thumbRamp="easy";
					knife.easeofSharpening="local";
					knife.legalBladeLength="pivot";
					knife.tensionAdjustment="overtravel";
					knife.lockbarStabilizer="quick";
					knife.assistedOpeningSpeed="thick";
					knife.bladeBackThickness="edc";
					knife.purpose="backspare";
					knife.backspacerDesign="wood";											
					knife.handleInlays="light";												
					knife.gentlemanFolderFeatures="thumb";											
					knife.lanyardHole=false;														
					knife.bladeHoles="slim";															
					knife.fingerGrooves=true;														
					knife.handleThickness="rotate";														
					knife.nonReflectiveFinish="grip";													
					knife.overallLength=15;																
					knife.handleContours="indiamade";													
					knife.customizationOptions="Manual";														
					knife.bladeMaterialOrigin="ceramic";																						
					knife.ceramicBladeOption="straight";											
					knife.rustEradicationFeatures="Coated";												
					knife.handleShape="Straight";															
					knife.specializedCoating="Stainless Steel";
					knife.warranty=1;
					
					
					System.out.println(knife.name);
					System.out.println(knife.type);
					System.out.println(knife.bladeMaterial);
					System.out.println(knife.handleMaterial);
					System.out.println(knife.bladeLength);
					System.out.println(knife.overallLength);
					System.out.println(knife.bladeShape);
					System.out.println(knife.grindType);
					System.out.println(knife.edgeType);
					System.out.println(knife.tangType);
					System.out.println(knife.HandleDesign);
					System.out.println(knife.weight);
					System.out.println(knife.balance);
					System.out.println(knife.spineThickness);
					System.out.println(knife.isDishwasherSafe);
					System.out.println(knife.lockingMechanism);
					System.out.println(knife.pocketClip);
					System.out.println(knife.countryOrigin);
					System.out.println(knife.retentionSystem);
					System.out.println(knife.openingMethod);
					System.out.println(knife.bladeCoating);
					System.out.println(knife.rustResistance);
					System.out.println(knife.corrosionResistance);
					System.out.println(knife.handleColor);
					System.out.println(knife.lanyardHole);
					System.out.println(knife.scales);
					System.out.println(knife.jimping);
					System.out.println(knife.overallLength);
					System.out.println(knife.bladeThickness);
					System.out.println(knife.spineDesign);
					System.out.println(knife.bladeSteelHardness);
					System.out.println(knife.ambidextrousFeatures);
					System.out.println(knife.fingerGrooves);
					System.out.println(knife.handleLength);
					System.out.println(knife.bladeFinish);
					System.out.println(knife.lanyardHole);
					System.out.println(knife.bladeSerrationType);
					System.out.println(knife.tacticalFeatures);
					System.out.println(knife.rearLocking);
					System.out.println(knife.bladeSteelHardness);
					System.out.println(knife.fullersGrooves);
					System.out.println(knife.fingerGuard);
					System.out.println(knife.bladeProfile);
					System.out.println(knife.bladeWidth);
					System.out.println(knife.handleErgonomics);
					System.out.println(knife.fingerGrooves);
					System.out.println(knife.bladeGeometry);
					System.out.println(knife.razorSharpness);
					System.out.println(knife.rustproofingTreatment);
					System.out.println(knife.bladeBelly);
					System.out.println(knife.bladeAngle);
					System.out.println(knife.customizationOptions);
					System.out.println(knife.bladeSteelComposition);
					System.out.println(knife.thumbRamp);
					System.out.println(knife.easeofSharpening);
					System.out.println(knife.legalBladeLength);
					System.out.println(knife.tensionAdjustment);
					System.out.println(knife.lockbarStabilizer);
					System.out.println(knife.assistedOpeningSpeed);
					System.out.println(knife.bladeBackThickness);
					System.out.println(knife.purpose);
					System.out.println(knife.backspacerDesign);
					System.out.println(knife.handleInlays);
					System.out.println(knife.gentlemanFolderFeatures);
					System.out.println(knife.fullersGrooves);
					System.out.println(knife.bladeHoles);
					System.out.println(knife.isItHoldable);
					System.out.println(knife.handleThickness);
					System.out.println(knife.nonReflectiveFinish);
					System.out.println(knife.bladeAngle);
					System.out.println(knife.handleContours);
					System.out.println(knife.hasTrailingPoint);
					System.out.println(knife.bladeMaterialOrigin);
					System.out.println(knife.bladeSteelComposition);
					System.out.println(knife.ceramicBladeOption);
					System.out.println(knife.rustEradicationFeatures);
					System.out.println(knife.handleShape);
					System.out.println(knife.specializedCoating);
					System.out.println(knife.warranty);
					System.out.println(knife.color);
					
					System.out.println("&&&&&&&&Shoe&&&&&&&&&&&&");
					
					Shoe shoe=new Shoe();
					shoe.brand="Adiddas";		
					System.out.println(shoe.brand);
				    shoe.materialType="Synthetic";		
					System.out.println(shoe.materialType);
					shoe.heelType="Flat";
					System.out.println(shoe.heelType);
					shoe.heelColor="white";
					System.out.println(shoe.heelColor);
					shoe.waterResistance="No waterResistance";
					System.out.println(shoe.waterResistance);
					shoe.soleMaterial="Rubber";
					System.out.println(shoe.soleMaterial);
					shoe.color="Blue and wihte";
					System.out.println(shoe.color);
					shoe.style="Flat";
					System.out.println(shoe.style);
					shoe.countryOfOrigin="India";
					System.out.println(shoe.countryOfOrigin);
					shoe.packageContents="1 Pair of Shoes";
					System.out.println(shoe.packageContents);
					shoe.idealFor="Womens";
					System.out.println(shoe.idealFor);
					shoe.material="Synthetic";
					System.out.println(shoe.material);
					shoe.size=29;
					System.out.println(shoe.size);
					shoe.manufacturer="ADIDAS INDIA MARKETING PRIVATE LIMITED";
					System.out.println(shoe.manufacturer);
					shoe.weight="800 Grams";
					System.out.println(shoe.weight);
					shoe.packer="ADIDAS INDIA MARKETING PRIVATE LIMITED";
					System.out.println(shoe.packer);
					shoe.length="30 centimeter";
					System.out.println(shoe.length);
					shoe.width="15 centimeter";
					System.out.println(shoe.width);
					shoe.height="5 centimeter";
					System.out.println(shoe.height);
					shoe.netQuantity="1 count";
					System.out.println(shoe.netQuantity);
					shoe.genericName="Tennis Shoe";
					System.out.println(shoe.genericName);
					shoe.itemModelNumber="GZ0707";
					System.out.println(shoe.itemModelNumber);
					shoe.asin="B096NBDPNY";
					System.out.println(shoe.asin);
					shoe.department="Women and Men";
					System.out.println(shoe.department);
				    shoe.customerRating=4.0f;
					System.out.println(shoe.customerRating);
					shoe.paymentType="online";
					System.out.println(shoe.paymentType);
					shoe.shoppingType="Online";
					System.out.println(shoe.shoppingType);
					shoe.laceColor="blue";
					System.out.println(shoe.laceColor);
					shoe.price=2056;
					System.out.println(shoe.price);
					shoe.brandFounder="Adolf Dassler";
					System.out.println(shoe.brandFounder);
					shoe.startedYear=1949;
					System.out.println(shoe.startedYear);
					shoe.isItWaterProof=false;
					System.out.println(shoe.isItWaterProof);
					shoe.canWeByInOnline=true;
					System.out.println(shoe.canWeByInOnline);
					shoe.isItHeatResistance=false;
					System.out.println(shoe.isItHeatResistance);
					shoe.isItFunctionWear=true;
					System.out.println(shoe.isItFunctionWear);
					shoe.isItMadeInIndia=true;
					System.out.println(shoe.isItMadeInIndia);
					shoe.isItPopularBrand=true;
					System.out.println(shoe.isItPopularBrand);
					shoe.noOfColorUsed=3;
					System.out.println(shoe.noOfColorUsed);
					shoe.canWomenWearThisShoe=true;
					System.out.println(shoe.canWomenWearThisShoe);
					shoe.isItCotton=false;
				    System.out.println(shoe.isItCotton);
				    shoe.availabilityType="Online and Offline";
				    System.out.println(shoe.availabilityType);
				    shoe.warranty=1;
					System.out.println(shoe.warranty);
					shoe.ceo="Bjørn Gulden";
					System.out.println(shoe.ceo);
					shoe.shoeWearerName="Sanjana";
					System.out.println(shoe.shoeWearerName);
					shoe.shoeWearerFatherName="Ravi";
					System.out.println(shoe.shoeWearerFatherName);
					shoe.shoeWearerMotherName="Susheela";
					System.out.println(shoe.shoeWearerMotherName);
					shoe.shoeWearerHusbandName="Nithin";
					System.out.println(shoe.shoeWearerHusbandName);
					shoe.shoeWearerFriendName="Navya";
					System.out.println(shoe.shoeWearerFriendName);
					shoe.shoeWearerLecturerName="Leena";
					System.out.println(shoe.shoeWearerLecturerName);
					shoe.shoeWearerForeignFriendName="Charitha";
					System.out.println(shoe.shoeWearerForeignFriendName);
					shoe.shoeWearerSisterName="Geetha";
					System.out.println(shoe.shoeWearerSisterName);
					shoe.shoeWearerBrotherName="Chandan";
					System.out.println(shoe.shoeWearerBrotherName);
					shoe.shoeBrandOwnerSonName="Henrik Gulden";
					System.out.println(shoe.shoeBrandOwnerSonName);
					shoe.shoeWearerAge=25;
					System.out.println(shoe.shoeWearerAge);
					shoe.shoeWearerHusbandAge=28;
					System.out.println(shoe.shoeWearerHusbandAge);
					shoe.shoeWearerFriendAge=25;
					System.out.println(shoe.shoeWearerFriendAge);
					shoe.shoeWearerSisterAge=21;
					System.out.println(shoe.shoeWearerSisterAge);
					shoe.shoeWearerBrotherAge=20;
					System.out.println(shoe.shoeWearerBrotherAge);
					shoe.shoeWearerForeignFriendAge=25;
					System.out.println(shoe.shoeWearerForeignFriendAge);
					shoe.willItTore=true;
					System.out.println(shoe.willItTore);
					shoe.canBeReusable=false;
					System.out.println(shoe.canBeReusable);
					shoe.hasDifferentInSize=true;
					System.out.println(shoe.hasDifferentInSize);
					shoe.hasDifferentInPrice=true;
					System.out.println(shoe.hasDifferentInPrice);
					shoe.hasDifferentInColor=true;
					System.out.println(shoe.hasDifferentInColor);
					shoe.hasDifferentInbrand=true;
					System.out.println(shoe.hasDifferentInbrand);
					shoe.hasDifferentInMaterial=true;
					System.out.println(shoe.hasDifferentInMaterial);
					shoe.hasDifferentInType=true;
					System.out.println(shoe.hasDifferentInType);
					shoe.isItFunctionalWear=true;
					System.out.println(shoe.isItFunctionalWear);
					shoe.isItTraditionalWear=false;
					System.out.println(shoe.isItTraditionalWear);
					shoe.itIsCasualShoe=false;
					System.out.println(shoe.itIsCasualShoe);
					shoe.isItNormalShoe=false;
					System.out.println(shoe.isItNormalShoe);
					shoe.isItTrendyShoe=true;
					System.out.println(shoe.isItTrendyShoe);
					shoe.isItModren=true;
					System.out.println(shoe.isItModren);
					shoe.isWearByChildren=false;
					System.out.println(shoe.isWearByChildren);
					shoe.isItAvailableInShops=true;
					System.out.println(shoe.isItAvailableInShops);
					shoe.isMadeByChina=false;
					System.out.println(shoe.isMadeByChina);
					shoe.canWomenWear=true;
					System.out.println(shoe.canWomenWear);
					shoe.canMenWear=true;
					System.out.println(shoe.canMenWear);
					shoe.canGirlsWear=true;
					System.out.println(shoe.canGirlsWear);
					
					System.out.println("&&&&&&&&Paarke&&&&&&&&&&&&");
					
					Paarke paarke=new Paarke(); 
					System.out.println(paarke.nameOfTheProduct);
					System.out.println(paarke.Price);
					System.out.println(paarke.color);
					System.out.println(paarke.paarkeMaterial);
					System.out.println(paarke.plasticPaarke);
					System.out.println(paarke.grassPaarke);
					System.out.println(paarke.bristleMaterial);
					System.out.println(paarke.handleMaterial);
					System.out.println(paarke.isReusable);
					System.out.println(paarke.isComfortable);
					System.out.println(paarke.isItToCleansHome);
					System.out.println(paarke.bristleType);
					System.out.println(paarke.Quality);
					System.out.println(paarke.specialFeature);
					System.out.println(paarke.surfaceRecommendation);
					System.out.println(paarke.includedComponents);
					System.out.println(paarke.brand);
					System.out.println(paarke.materialFeature);
					System.out.println(paarke.Style);
					System.out.println(paarke.itemWeight);
					System.out.println(paarke.Manufacturer);
					System.out.println(paarke.countryOfOrigin);
					System.out.println(paarke.length);
					System.out.println(paarke.width);
					System.out.println(paarke.height);
					System.out.println(paarke.weight);
					System.out.println(paarke.isItAvailableOnline);
					System.out.println(paarke.canWePayCash);
					System.out.println(paarke.isUsedByNoOfUsers);
					System.out.println(paarke.Availability);
					System.out.println(paarke.PriceInStore);
					System.out.println(paarke.netQuantity);
					System.out.println(paarke.genericName);
					System.out.println(paarke.customerRatingByFeature);
					System.out.println(paarke.easyToUse);
					System.out.println(paarke.Sturdiness);
					System.out.println(paarke.Durability);
					System.out.println(paarke.Longevity);
					System.out.println(paarke.paarkeLong);
					System.out.println(paarke.isItGoodToUse);
					System.out.println(paarke.isAvailableOffline);
					System.out.println(paarke.UsersAge);
					System.out.println(paarke.isItOnlyUseByWomen);
					System.out.println(paarke.childCanUseIt);
					System.out.println(paarke.countryUsesPaarke);
					System.out.println(paarke.paymentType);
					System.out.println(paarke.easyToCarry);
					System.out.println(paarke.isItPortable);
					System.out.println(paarke.isItLightWeight);
					System.out.println(paarke.hasStiffFiber);
					System.out.println(paarke.materialUsed);
					System.out.println(paarke.isMadeOfCornHusks);
					System.out.println(paarke.handleType);
					System.out.println(paarke.broomStickHas);
					System.out.println(paarke.isItToCleanFloor);
					System.out.println(paarke.isItToSweep);
					System.out.println(paarke.hasShaft);
					System.out.println(paarke.paarkeCleansSteps);
					System.out.println(paarke.isHookIsAtTop);
					System.out.println(paarke.significance);
					System.out.println(paarke.weCanUseRoughly);
					System.out.println(paarke.itIsmadeByFibers);
					System.out.println(paarke.isItUseToBeatPeople);
					System.out.println(paarke.weCanUseItForCleanTheClassRoom);
					System.out.println(paarke.nameOfBroomStick);
					System.out.println(paarke.whichsBroomStick);
					System.out.println(paarke.hasHoleToHangIt);
					System.out.println(paarke.IndiansCallsBroomStickHas);
					System.out.println(paarke.wichPaarkeIsBest);
					System.out.println(paarke.willItCleanProperly);
					System.out.println(paarke.plantUsedToMakeBroom);
					System.out.println(paarke.Purpose);
					System.out.println(paarke.canBoysUseParake);
					System.out.println(paarke.normalColorOfPaarke);
					System.out.println(paarke.oldestPaarke);
		
	
	}
}

